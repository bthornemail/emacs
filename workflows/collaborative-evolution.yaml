workflow:
  id: "collaborative-evolution-workflow"
  type: "repl"
  y_combinator_level: "shared"
  
  read:
    source: "multi-source"
    input_type: "s-expression"
    protocol: "hybrid"
    
  eval:
    transform: "collaborative-process-input"
    async:
      enabled: true
      executor: "hybrid"
      timeout: 15.0
      
  print:
    output: "multi-target"
    target: "*Collaborative-REPL*"
    format: "pretty-print"
    
  loop:
    condition: "(lambda (ctx) (not (plist-get ctx :quit)))"
    
  error:
    try: "eval-transform"
    catch: "(lambda (err) (message \"Error: %s\" err))"
    await: "collaborative-decision"
    recovery: "consensus-fallback"
    
  spo_modality:
    subject: "multi-agent-system"
    predicate: "collaborates-with"
    object: "user"
    modality: "collaborative"
